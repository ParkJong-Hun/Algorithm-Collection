//결과값을 구했는데도 다시 그 결과값을 구하려하면 비효율적이다.
//다이나믹 프로그래밍은 이러한 불필요한 연산을 막고 딱 한 번만 결과값을 구하는 것을 의미한다.
//큰 문제를 작은 문제로 나눌 수 있고, 작은 문제에서 구한 결과값은 큰 문제에서도 포함될 때 사용할 수 있다.
//이렇게 결과값을 딱 한 번 구해놓고 그 것을 저장해 놓는 것을 Memoization이라고 한다.
#include <stdio.h>
//피보나치 수열은 작은 문제(재귀법을 사용하는 점화식)으로 나눌 수 있고, 큰 문제에서도 포함되기 때문에 다이나믹 프로그래밍을 할 수 있다.
int d[100];//다이나믹 프로그래밍을 하기 위해 메모이제이션을 할 배열!!!!
//피보나치 수열. 이미 d배열에 값을 메모이제이션 해놓으면 바로 그것을 리턴하게 해서 연산 시간을 절약한다.
int dp(int x) {
    if(x == 1) return 1;
    if(x == 2) return 1;
    if(d[x] != 0) return d[x];
    return d[x] = dp(x - 1) + dp(x - 2);
}

int main(void) {
    printf("%d", dp(20));
}